/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package orchard;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author Chris
 */
public class OrchardTransformationInfo extends javax.swing.JFrame {

    /**
     * Creates new form CilantroTransformationInfo
     */
    public OrchardTransformationInfo() {
        initComponents();
        addListeners();
        clearGeneList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfnInfoBanner = new javax.swing.JLabel();
        notebookNumberLabel = new javax.swing.JLabel();
        startingPageLabel = new javax.swing.JLabel();
        endingPageLabel = new javax.swing.JLabel();
        compCellTypeLabel = new javax.swing.JLabel();
        batchNameLabel = new javax.swing.JLabel();
        compCellTypeField = new javax.swing.JLabel();
        batchField = new javax.swing.JLabel();
        notebookNumberField = new javax.swing.JLabel();
        startPgField = new javax.swing.JLabel();
        endPgField = new javax.swing.JLabel();
        geneListPane = new javax.swing.JScrollPane();
        geneList = new javax.swing.JList();
        geneStatsButton = new javax.swing.JButton();
        methodLabel = new javax.swing.JLabel();
        methodField = new javax.swing.JLabel();
        plasmidTypeField = new javax.swing.JLabel();
        controlLabel = new javax.swing.JLabel();
        efficiencyLabel = new javax.swing.JLabel();
        efficiencyField = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tfnInfoBanner.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tfnInfoBanner.setText("Transformation Info");

        notebookNumberLabel.setText("Notebook Number:");

        startingPageLabel.setText("Starting Page:");

        endingPageLabel.setText("Ending Page:");

        compCellTypeLabel.setText("Comp Cell Type:");

        batchNameLabel.setText("Batch Name:");

        compCellTypeField.setText("jLabel1");

        batchField.setText("jLabel1");

        notebookNumberField.setText("jLabel1");

        startPgField.setText("jLabel1");

        endPgField.setText("jLabel1");

        geneList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        geneListPane.setViewportView(geneList);

        geneStatsButton.setText("Gene Stats");

        methodLabel.setText("Method:");

        methodField.setText("jLabel1");

        plasmidTypeField.setText("jLabel1");

        controlLabel.setText("Control Plasmid:");

        efficiencyLabel.setText("Tfn Efficiency:");

        efficiencyField.setText("jLabel2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(notebookNumberLabel)
                                    .addComponent(startingPageLabel)
                                    .addComponent(endingPageLabel))
                                .addComponent(methodLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(batchNameLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(compCellTypeLabel)
                            .addComponent(controlLabel)
                            .addComponent(efficiencyLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(methodField)
                            .addComponent(startPgField)
                            .addComponent(endPgField)
                            .addComponent(batchField)
                            .addComponent(compCellTypeField)
                            .addComponent(plasmidTypeField)
                            .addComponent(efficiencyField)
                            .addComponent(notebookNumberField))
                        .addGap(79, 79, 79)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(geneListPane, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(geneStatsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(tfnInfoBanner)))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tfnInfoBanner)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(geneStatsButton)
                    .addComponent(notebookNumberLabel)
                    .addComponent(notebookNumberField))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startPgField)
                            .addComponent(startingPageLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(endingPageLabel)
                            .addComponent(endPgField))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(methodField)
                            .addComponent(methodLabel))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(batchNameLabel)
                            .addComponent(batchField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(compCellTypeField)
                            .addComponent(compCellTypeLabel))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(plasmidTypeField)
                            .addComponent(controlLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(efficiencyLabel)
                            .addComponent(efficiencyField)))
                    .addComponent(geneListPane, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrchardTransformationInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrchardTransformationInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrchardTransformationInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrchardTransformationInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrchardTransformationInfo().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel batchField;
    private javax.swing.JLabel batchNameLabel;
    private javax.swing.JLabel compCellTypeField;
    private javax.swing.JLabel compCellTypeLabel;
    private javax.swing.JLabel controlLabel;
    private javax.swing.JLabel efficiencyField;
    private javax.swing.JLabel efficiencyLabel;
    private javax.swing.JLabel endPgField;
    private javax.swing.JLabel endingPageLabel;
    private javax.swing.JList geneList;
    private javax.swing.JScrollPane geneListPane;
    private javax.swing.JButton geneStatsButton;
    private javax.swing.JLabel methodField;
    private javax.swing.JLabel methodLabel;
    private javax.swing.JLabel notebookNumberField;
    private javax.swing.JLabel notebookNumberLabel;
    private javax.swing.JLabel plasmidTypeField;
    private javax.swing.JLabel startPgField;
    private javax.swing.JLabel startingPageLabel;
    private javax.swing.JLabel tfnInfoBanner;
    // End of variables declaration//GEN-END:variables
    private DatabaseConnector connection = null;
    private Connection dbConnection = null;
    private String tfnDate = null;
    /*private void connectToDatabase() {

     try {
     connection = new DatabaseConnector();
     dbConnection = connection.connectDB();
     } catch (Exception e) {
     System.out.println("Unable to connect to database");
     }
     }

     private void disconnectFromDatabase() {
     connection.closeDBConnection(dbConnection);
     }*/

    private void addListeners() {
        geneStatsButton.addActionListener(new TransformationInfoActionListener());
    }

    private void clearGeneList() {
        geneList.setModel(new DefaultListModel());
    }

    public void appendGeneList(String value) {
        DefaultListModel geneListModel = (DefaultListModel) geneList.getModel();
        geneListModel.addElement(value);

    }

    public void setBatchField(String value) {
        batchField.setText(value);
    }

    public void setCompCellTypeField(String value) {
        compCellTypeField.setText(value);
    }

    public void setEfficiencyField(String value) {
        efficiencyField.setText(value);
    }

    public void setEndPgField(String value) {
        endPgField.setText(value);
    }

    public void setMethodField(String value) {
        methodField.setText(value);
    }

    public void setNotebookNumberField(String value) {
        notebookNumberField.setText(value);
    }

    public void setPlasmidTypeField(String value) {
        plasmidTypeField.setText(value);
    }

    public void setStartPgField(String value) {
        startPgField.setText(value);
    }

    public void setTfnDate(String date) {
        tfnDate = date;
    }

    class TransformationInfoActionListener implements ActionListener {

        private DatabaseConnector connection = null;
        private Connection dbConnection = null;

        /*private void connectToDatabase() {

         try {
         connection = new DatabaseConnector();
         dbConnection = connection.connectDB();
         } catch (Exception e) {
         System.out.println("Unable to connect to database");
         }
         }

         private void disconnectFromDatabase() {
         connection.closeDBConnection(dbConnection);
         }*/
        @Override
        public void actionPerformed(ActionEvent e) {
            Object source = e.getSource();
            if (source == geneStatsButton) {
                OrchardGeneStats geneStats = new OrchardGeneStats();
                DatabaseConnector dbConnector = new DatabaseConnector();
                Connection dbConnection = null;

                ResultSet rs = null;

                PreparedStatement stmt = null;
                String geneLocus = geneList.getSelectedValue().toString();
                try {
                    dbConnection = dbConnector.connectDB();
                    //have date field in tfnInfo
                    //set from GeneInfo
                    //String tfnDate = tfnSelectionList.getSelectedValue().toString();
                    stmt = dbConnection.prepareStatement("Select * from Transformation_has_Gene Where Transformation_Date = '" + tfnDate + "' AND Gene_Locus = '" + geneLocus + "'");

                    rs = stmt.executeQuery();
                    geneStats.setLocusTag(geneLocus);
                    while (rs.next()) {
                        geneStats.setColonyCount(rs.getString("Colonies"));
                        geneStats.setKOProduced(rs.getString("KOProduced"));
                        geneStats.setShared(rs.getString("Shared"));
                        geneStats.setSharedWith(rs.getString("SharedWith"));
                        geneStats.setTfnNum(rs.getString("TfnNumber"));
                        geneStats.setTimeConstant(rs.getString("TimeConstant"));
                    }

                } catch (SQLException ex) {
                    Logger.getLogger(OrchardTransformationInfo.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(OrchardTransformationInfo.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    //query
                    dbConnector.closeDBConnection(dbConnection);
                } catch (SQLException ex) {
                    Logger.getLogger(OrchardGeneInfo.class.getName()).log(Level.SEVERE, null, ex);
                }

                geneStats.setVisible(true);

            } else {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

        }

    }

}
